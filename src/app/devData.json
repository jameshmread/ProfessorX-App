[
    {
        "runner": "mocha",
        "config": {
            "reporter": "dot"
        },
        "duration": {
            "d": 0,
            "h": 0,
            "m": 0,
            "s": 2,
            "ms": 912
        },
        "scoresPerFile": {
            "files": [
                "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
                "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts"
            ],
            "mutantsSurvivedForEach": [
                2,
                10
            ],
            "totalMutationsForEach": [
                31,
                37
            ]
        },
        "overallScores": {
            "totalKilledMutants": 56,
            "totalSurvivingMutants": 12,
            "mutationScore": 82.35
        }
    },
    [
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "-",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [],
            "mutatedCode": [],
            "SRC_FILE_PATH": "../vscode-github-master/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\vscode-github-master\\src\\extension.ts",
            "targetNode": "||",
            "mutationType": "Replacing one Logical operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\vscode-github-master\\test\\extension.test.ts0C2156undefined.m.ts",
            "mutationAttemptFailure": {
                "reasonForFailure": "Mutant Errored Due to: Mocha Errored.",
                "attemptedMutation": "||",
                "nodeToBeMutated": {
                    "syntaxType": 54,
                    "positions": {
                        "pos": 2127,
                        "end": 2130
                    },
                    "parentFilePath": "C:\\git\\Honors-Project\\vscode-github-master\\src\\extension.ts",
                    "plainText": "||",
                    "associatedTestFilePath": "C:\\git\\Honors-Project\\vscode-github-master\\test\\extension.test.ts"
                }
            }
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 >= 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts8C3204undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % -2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "2",
            "mutationType": "Modification of Numeric Literal",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts16C3204undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = -1; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts13C6876undefined.m.ts"
        }
    ],
    [
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "-",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 !== 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts9C3204undefined.m.ts"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 / 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts13C3204undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "2",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 2 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts14C6876undefined.m.ts"
        }
    ],
    [
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 - 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts10C3204undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "2",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "2",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": [
                {
                    "lineText": "\r",
                    "lineNumber": 13
                },
                {
                    "lineText": "    public truth () {\r",
                    "lineNumber": 14
                },
                {
                    "lineText": "        return true;\r",
                    "lineNumber": 15
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 16
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "\r",
                    "lineNumber": 13
                },
                {
                    "lineText": "    public truth () {\r",
                    "lineNumber": 14
                },
                {
                    "lineText": "        return false;\r",
                    "lineNumber": 15
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 16
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "true",
            "mutationType": "Inverting a Boolean",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.spec.ts3C9060undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 2; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts6C2744undefined.m.ts"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > -1){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts10C2744undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "\r",
                    "lineNumber": 25
                },
                {
                    "lineText": "    public percentage (b: number, c: number) {\r",
                    "lineNumber": 26
                },
                {
                    "lineText": "        return (b / c) * 100;\r",
                    "lineNumber": 27
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 28
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "\r",
                    "lineNumber": 25
                },
                {
                    "lineText": "    public percentage (b: number, c: number) {\r",
                    "lineNumber": 26
                },
                {
                    "lineText": "        return b / c * 100;\r",
                    "lineNumber": 27
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 28
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "(b / c)",
            "mutationType": "Removal of Parenthesis in a statement",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.spec.ts11C6876undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal"
        }
    ],
    [
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "-",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 > 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "mutatedCode": [
                {
                    "lineText": "    public getEvenNumbers (limit: number): Array <number> {\r",
                    "lineNumber": 2
                },
                {
                    "lineText": "        const numbers = [];\r",
                    "lineNumber": 3
                },
                {
                    "lineText": "        for (let i = 0; i < limit + 1; i++) {\r",
                    "lineNumber": 4
                },
                {
                    "lineText": "            if (i % 2 === 0 && 1 + 0){\r",
                    "lineNumber": 5
                },
                {
                    "lineText": "                numbers.push(i);\r",
                    "lineNumber": 6
                },
                {
                    "lineText": "            }\r",
                    "lineNumber": 7
                },
                {
                    "lineText": "        }\r",
                    "lineNumber": 8
                },
                {
                    "lineText": "        return numbers;\r",
                    "lineNumber": 9
                },
                {
                    "lineText": "    }\r",
                    "lineNumber": 10
                }
            ],
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": ">",
            "mutationType": "Replacing one Binary Operator with another",
            "testFilePath": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.spec.ts11C3204undefined.m.ts"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "2",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "100",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "%",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "+",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\HelloWorld.ts",
            "targetNode": "*",
            "mutationType": "Replacing one Binary Operator with another"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "0",
            "mutationType": "Modification of Numeric Literal"
        },
        {
            "originalCode": null,
            "mutatedCode": null,
            "SRC_FILE_PATH": "./testProject/src/",
            "SRC_FILE": "C:\\git\\Honors-Project\\ProfessorX\\testProject\\src\\FileTwo.ts",
            "targetNode": "1",
            "mutationType": "Modification of Numeric Literal"
        }
    ]
]